package com.devrimtuncer.socialconnection.activities.loggedin;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.design.widget.Snackbar;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import com.devrimtuncer.socialconnection.R;
import com.devrimtuncer.socialconnection.fragments.ItemDetailFragment;
import com.devrimtuncer.socialconnection.pojo.Item;
import com.devrimtuncer.socialconnection.pojo.UserInfo;
import com.devrimtuncer.socialconnection.socialapiclients.SocialApiClient;
import com.devrimtuncer.socialconnection.socialapiclients.SocialApiClientType;

import java.util.ArrayList;

/**
 * This class was auto generated by Android Studio, it is modified.
 * <br>
 * An activity representing a list of Items. This activity
 * has different presentations for handset and tablet-size devices. On
 * handsets, the activity presents a list of items, which when touched,
 * lead to a {@link ItemDetailActivity} representing
 * item details. On tablets, the activity presents the list of items and
 * item details side-by-side using two vertical panes.
 */
public class ItemListActivity extends LoggedInActivity implements OnSimpleItemSelectListener{
    private static final String TAG = "ITEM_LIST";

    public static final String ARG_USER_INFO = "user_info";
    public static final String ARG_ITEM_LIST = "item_list";

    /**
     * Whether or not the activity is in two-pane mode, i.e. running on a tablet
     * device.
     */
    private boolean mTwoPane;

    private UserInfo userInfo;
    private ArrayList<Item> mItemList;


    // Views
    private RecyclerView mRecyclerView;
    private SwipeRefreshLayout mSwipeRefreshLayout;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_item_list);

        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        userInfo = getIntent().getParcelableExtra(ARG_USER_INFO);
        mItemList = getIntent().getParcelableArrayListExtra(ARG_ITEM_LIST);

        if(savedInstanceState != null) {
            userInfo = savedInstanceState.getParcelable(ARG_USER_INFO);
            mItemList = savedInstanceState.getParcelableArrayList(ARG_ITEM_LIST);
        }

        assert userInfo != null;

        mSwipeRefreshLayout = (SwipeRefreshLayout) findViewById(R.id.swipe_refresh_layout);
        assert mSwipeRefreshLayout != null;

        mSwipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
                @Override
                public void onRefresh() {
                    refreshItems();
                }
            });

        mRecyclerView = (RecyclerView)findViewById(R.id.item_list);
        assert mRecyclerView != null;

        setupRecyclerView(mRecyclerView);

        // The detail container view will be present only in the
        // large-screen layouts (res/values-w900dp).
        // If this view is present, then the
        // activity should be in two-pane mode.
        mTwoPane = findViewById(R.id.item_detail_container) != null;

        refreshItems();
    }

    private void setupRecyclerView(@NonNull RecyclerView recyclerView) {
        if(recyclerView.getAdapter() == null) {
            recyclerView.setAdapter(new SimpleItemRecyclerViewAdapter(mItemList));
        } else {
            ((SimpleItemRecyclerViewAdapter)recyclerView.getAdapter()).setItems(mItemList);
            recyclerView.getAdapter().notifyDataSetChanged();
        }
    }

    private void refreshItems() {
        mSwipeRefreshLayout.post(new Runnable() {
            @Override
            public void run() {
              onRefreshStarted();
            }
        });

        final SocialApiClientType socialApiClientType = userInfo.getSocialApiClientType();
        SocialApiClient socialApiClient = createSocialApiClient(socialApiClientType);

        if(socialApiClient != null) {
            socialApiClient.fetchItems(userInfo, new SocialApiClient.FetchItemsCallback() {
                @Override
                public void success(ArrayList<Item> itemList) {
                    onRefreshFinished();

                    if (mRecyclerView != null) {
                        // Update mItemList with new list.
                        mItemList = itemList;

                        // setupRecyclerView method updates recycler view with new list
                        setupRecyclerView(mRecyclerView);
                    }
                }

                @Override
                public void failure(Exception exception) {
                    onRefreshFinished();

                    Log.e(TAG, "Fetch items for " + socialApiClientType + " failure", exception);

                    View snackBarContainer = findViewById(R.id.coordinator_layout);
                    assert snackBarContainer != null;
                    Snackbar.make(snackBarContainer, getResources().getString(R.string.error_message_refresh), Snackbar.LENGTH_SHORT).show();
                }
            });
        }
    }

    private void onRefreshStarted() {
        if (mSwipeRefreshLayout != null) {
            mSwipeRefreshLayout.setRefreshing(true);
            mSwipeRefreshLayout.setEnabled(false);
        }
    }

    private void onRefreshFinished() {
        if (mSwipeRefreshLayout != null) {
            mSwipeRefreshLayout.setRefreshing(false);
            mSwipeRefreshLayout.setEnabled(true);
        }
    }


    @Override
    public void onSimpleItemSelected(Item item) {
        if (mTwoPane) {
            Bundle arguments = new Bundle();
            arguments.putParcelable(ItemDetailFragment.ARG_ITEM, item);
            ItemDetailFragment fragment = new ItemDetailFragment();
            fragment.setArguments(arguments);
            getSupportFragmentManager().beginTransaction()
                    .replace(R.id.item_detail_container, fragment)
                    .commit();
        } else {
            Intent intent = new Intent(this, ItemDetailActivity.class);
            intent.putExtra(ItemDetailFragment.ARG_ITEM, item);

            startActivity(intent);
        }
    }

    private static class SimpleItemRecyclerViewAdapter
            extends RecyclerView.Adapter<SimpleItemRecyclerViewAdapter.ViewHolder> {

        private ArrayList<Item> mValues;

        public SimpleItemRecyclerViewAdapter(ArrayList<Item> items) {
            mValues = items;
        }

        public void setItems(ArrayList<Item> items) {
            this.mValues = items;
        }

        @Override
        public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            View view = LayoutInflater.from(parent.getContext())
                    .inflate(R.layout.item_list_content, parent, false);
            return new ViewHolder(view);
        }

        @Override
        public void onBindViewHolder(final ViewHolder holder, int position) {
            holder.mItem = mValues.get(position);
            holder.mItemInfo0TextView.setText(mValues.get(position).getUserId());
            holder.mItemInfo1TextView.setText(mValues.get(position).getText());

            holder.mView.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    Context context = v.getContext();
                    ((OnSimpleItemSelectListener)context).onSimpleItemSelected(holder.mItem);
                }
            });
        }

        @Override
        public int getItemCount() {
            if(mValues == null) {
                return 0;
            } else {
                return mValues.size();
            }
        }

        static class ViewHolder extends RecyclerView.ViewHolder {
            public View mView;
            public final TextView mItemInfo0TextView;
            public final TextView mItemInfo1TextView;
            public Item mItem;

            public ViewHolder(View view) {
                super(view);
                mView = view;
                mItemInfo0TextView = (TextView) view.findViewById(R.id.item_info_0);
                mItemInfo1TextView = (TextView) view.findViewById(R.id.item_info_1);
            }
        }
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();
        switch (id) {
            case R.id.logout:
                logout();
                return true;
        }

        return super.onOptionsItemSelected(item);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.menu_logged_in, menu);
        return true;
    }

    // TODO: app must be tested when Developer Options --> Don't keep activities enabled
    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);

        outState.putParcelable(ARG_USER_INFO, userInfo);
        outState.putParcelableArrayList(ARG_ITEM_LIST, mItemList);
    }
}

/**
 * A simple interface which is used at adapter to activity communication
 */
interface OnSimpleItemSelectListener {
    void onSimpleItemSelected(Item item);
}
